{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","id","email","name","className","alt","src","CardList","robots","renderRobots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredBots","filter","robot","toLowerCase","includes","length","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAqBeA,EAjBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACvB,OACI,sBAAKC,UAAU,sDAAf,UACI,6CAAgBH,KAChB,gCACI,qBAAKI,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,gCACI,6BAAKE,IACL,4BAAID,cCYTK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEVC,EAAeD,EAAOE,KAAI,SAACC,EAAMC,GACnC,OACI,cAAC,EAAD,CAEIX,GAAIO,EAAOI,GAAGX,GACdE,KAAMK,EAAOI,GAAGT,KAChBD,MAAOM,EAAOI,GAAGV,OAHZU,MAOjB,OACI,8BACKH,KCJEI,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,qBAAKX,UAAY,MAAjB,SACA,uBACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,mBACZC,SAAUH,OCEPI,EATA,SAACC,GACZ,OAEI,aADA,CACA,OAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YCgBJC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG9B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,kDAEJG,KAAKX,MAAMK,a,GAhBCQ,aCsDZC,G,uDA9CX,aAAe,IAAD,8BAEV,gBAiBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAjB1C,EAAKZ,MAAQ,CACTnB,OAAQ,GACR6B,YAAa,IALP,E,qDASd,WAAqB,IAAD,OAEhBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAExB,OAAQoC,S,oBAU/C,WAAU,IAAD,EAC2Bb,KAAKJ,MAA7BnB,EADH,EACGA,OAAQ6B,EADX,EACWA,YACVQ,EAAerC,EAAOsC,QAAO,SAAAC,GAC/B,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASZ,EAAYW,kBAEzD,OAAKxC,EAAO0C,OAIJ,sBAAK9C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,YAAauB,EAAatB,aAAcgB,KAAKI,iBACxD,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU3B,OAAQqC,WAR3B,6C,GA9BDM,IAAMlB,YCGTmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAK1D,UAAU,SAEjB2D,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.926cbcba.chunk.js","sourcesContent":["import React from 'react';\n\n// Robohash is an API that generates random robots based on the query parameters in the URL\n// Card - Functional Component - Child of Cardlist\nconst Card = ({ id, email, name }) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <h2>RoboFriend {id}</h2>\n            <div>\n                <img alt='robots' src={`https://robohash.org/${id}?100x100`} />\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n// Have to export components to use in other files\n// Default means one thing being exported\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n// CardList - Functional Component - Loops through list of robots and maps a robot to\n// a Card Component\nconst CardList = ({ robots }) => {\n    // Map each item in an array to a Card component (takes a callback function)\n    const renderRobots = robots.map((user, i) => {\n        return (\n            <Card \n                key={i} \n                id={robots[i].id} \n                name={robots[i].name} \n                email={robots[i].email} \n            />\n        )\n    })\n    return (\n        <div>\n            {renderRobots}\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n    return (\n        <div className = 'pa2'>\n        <input \n            className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search robots...'\n            onChange={searchChange} \n        />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return  (\n        /*This is how we make the component Scrollable */\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooops. Not good.</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry\n\n","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\n// Rule of thumb, if function not a part of React use arrow function\n// Smart Component - Component that has state\nclass App extends React.Component {\n    constructor() {\n        // Calls the constructor of component\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        // Make this HTTP request\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({ robots: users }));\n    }\n\n    // Runs everytime there was an event in the SearchBox\n    // When search field state is updated, app is re-rendered so filtered\n    // list is displayed\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value });\n    }\n\n    render() {\n        const { robots, searchfield } = this.state;\n        const filteredBots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        });\n        if (!robots.length) {\n            return <h1>Loading</h1>\n        } else {\n            return (\n                <div className='tc'>\n                    <h1 className='f2'>RoboFriends</h1>\n                    <SearchBox searchField={searchfield} searchChange={this.onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredBots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            )\n        }\n    }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport './containers/App.css';\n\n// Note: All stylng done with tachyons library\nReactDOM.render(\n  <React.StrictMode>\n    <App className='tc'/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}